name: IaC Compliance Validation

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  validate:
    name: Run IaC compliance checks
    runs-on: ubuntu-latest
    env:
      TF_WORKING_DIR: examples/azure/storage_account # TODO(Track E): Allow repositories to override the module directory.
      VALIDATION_TARGET: examples/azure/storage_account/compliant # TODO(Track E): Detect target modules dynamically from repo metadata.
      COMPLIANCE_FAIL_ON: error # TODO(Track E): Wire through CLI defaults or workflow inputs for severity gating.
      PSRULE_MODULES: PSRule.Rules.Azure

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install CLI dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6 # TODO(Track E): Align with documented toolchain matrix.

      - name: Restore Terraform plugin cache
        id: terraform-cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.TF_WORKING_DIR }}/.terraform
          key: ${{ runner.os }}-terraform-${{ hashFiles(format('{0}/**/*.tf', env.TF_WORKING_DIR)) }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Set up PowerShell Core
        uses: PowerShell/PowerShell@v1
        with:
          pwsh-version: '7.4'

      - name: Restore PSRule module cache
        id: psrule-cache
        uses: actions/cache@v4
        with:
          path: ~/.local/share/powershell/Modules
          key: ${{ runner.os }}-psrule-${{ hashFiles('rules/**/*.yaml') }}
          restore-keys: |
            ${{ runner.os }}-psrule-

      - name: Install PSRule modules
        shell: pwsh
        run: |
          foreach ($module in $env:PSRULE_MODULES.Split(',')) {
            if (-not (Test-Path (Join-Path $env:HOME ".local/share/powershell/Modules/$module"))) {
              Install-Module -Name $module -Scope CurrentUser -Force -Confirm:$false
            }
          }

      - name: Terraform init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init -input=false

      - name: Run IaC compliance validation
        run: |
          iac-compliance validate "${{ env.VALIDATION_TARGET }}" \
            --fail-on "${{ env.COMPLIANCE_FAIL_ON }}"
        # TODO(Track E): Replace fixture validation with real plan ingestion once implemented.

      # TODO(Track E): Publish job summary and annotations once reporting helpers land.
      # TODO(Track E): Upload structured findings artifact for downstream tooling.
