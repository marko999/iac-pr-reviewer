name: IaC Compliance Validation

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:
    inputs:
      plan-json:
        description: Path to a Terraform plan JSON artifact to validate.
        required: false
        default: ""
      fail-on:
        description: Highest allowed severity before failing the workflow.
        required: false
        default: high
        type: choice
        options:
          - info
          - low
          - medium
          - high
          - critical
      rule-manifests:
        description: >-
          Newline separated list of PSRule manifest files to include when running validation.
        required: false
        default: ""

permissions:
  contents: read

jobs:
  validate:
    name: Run IaC compliance checks
    runs-on: ubuntu-latest
    env:
      PSRULE_MODULES: PSRule.Rules.Azure

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install CLI dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .

      - name: Restore PSRule module cache
        id: psrule-cache
        uses: actions/cache@v4
        with:
          path: ~/.local/share/powershell/Modules
          key: ${{ runner.os }}-psrule-${{ hashFiles('rules/**/*.yaml') }}
          restore-keys: |
            ${{ runner.os }}-psrule-

      - name: Install PSRule modules
        shell: pwsh
        run: |
          if (-not (Get-PackageProvider -Name NuGet -ErrorAction SilentlyContinue)) {
            Install-PackageProvider -Name NuGet -Scope CurrentUser -Force -Confirm:$false
          }
          if (Get-Command Set-PSRepository -ErrorAction SilentlyContinue) {
            Set-PSRepository -Name PSGallery -InstallationPolicy Trusted -ErrorAction SilentlyContinue
          }
          foreach ($module in $env:PSRULE_MODULES.Split(',')) {
            if (-not (Test-Path (Join-Path $env:HOME ".local/share/powershell/Modules/$module"))) {
              Install-Module -Name $module -Scope CurrentUser -Force -Confirm:$false
            }
          }

      - name: Expose PSRule wrapper
        run: |
          cat <<'EOF' > "$RUNNER_TEMP/ps-rule"
          #!/usr/bin/env bash
          # Temporary stub until PSRule integration lands (Track D/E).
          cat <<'JSON'
          {"results":[]}
          JSON
          EOF
          chmod +x "$RUNNER_TEMP/ps-rule"
          echo "$RUNNER_TEMP" >> "$GITHUB_PATH"

      - name: Resolve validation configuration
        env:
          WORKFLOW_PLAN_JSON: ${{ inputs.plan-json }}
          WORKFLOW_FAIL_ON: ${{ inputs.fail-on }}
          WORKFLOW_RULE_MANIFESTS: ${{ inputs.rule-manifests }}
          CONFIG_PATH: .github/iac-compliance.json
        run: |
          python <<'PY'
          import json
          import os
          from pathlib import Path

          DEFAULTS = {
              "plan_json": "tests/fixtures/azure/app_service_storage_plan.json",
              "fail_on": "high",
              "rule_manifests": [],
          }

          config_path = Path(os.environ.get("CONFIG_PATH", "")).resolve()
          config: dict[str, object] = {}
          if config_path.is_file():
              try:
                  loaded = json.loads(config_path.read_text())
              except json.JSONDecodeError as exc:
                  raise SystemExit(f"Invalid JSON in {config_path}: {exc}")
              if not isinstance(loaded, dict):
                  raise SystemExit(f"Configuration file must contain a JSON object: {config_path}")
              config = loaded

          plan_json = (
              os.environ.get("WORKFLOW_PLAN_JSON")
              or config.get("plan_json")
              or DEFAULTS["plan_json"]
          )
          if plan_json is None:
              plan_json = ""
          elif not isinstance(plan_json, str):
              plan_json = str(plan_json)

          fail_on = (
              os.environ.get("WORKFLOW_FAIL_ON")
              or config.get("fail_on")
              or DEFAULTS["fail_on"]
          )
          if isinstance(fail_on, str):
              fail_on = fail_on.lower()
          else:
              raise SystemExit("fail_on must be a string value")
          allowed_failures = {"info", "low", "medium", "high", "critical"}
          if fail_on not in allowed_failures:
              raise SystemExit(
                  "fail_on must be one of: info, low, medium, high, critical"
              )

          manifest_override = os.environ.get("WORKFLOW_RULE_MANIFESTS")
          if manifest_override:
              manifest_values = [
                  line.strip()
                  for line in manifest_override.splitlines()
                  if line.strip()
              ]
          else:
              manifests = config.get("rule_manifests", DEFAULTS["rule_manifests"])
              if not isinstance(manifests, list):
                  raise SystemExit("rule_manifests must be an array of strings")
              manifest_values = [str(value) for value in manifests if str(value).strip()]

          github_env = Path(os.environ["GITHUB_ENV"])
          with github_env.open("a", encoding="utf-8") as env_file:
              if plan_json:
                  env_file.write(f"VALIDATION_PLAN_JSON={plan_json}\n")
              env_file.write(f"COMPLIANCE_FAIL_ON={fail_on}\n")
              env_file.write("RULE_MANIFESTS<<EOF\n")
              env_file.write("\n".join(manifest_values))
              env_file.write("\nEOF\n")

          print("Resolved configuration:")
          print(f"  plan_json={plan_json}")
          print(f"  fail_on={fail_on}")
          if manifest_values:
              for value in manifest_values:
                  print(f"  rule_manifest={value}")
          else:
              print("  rule_manifest=<none>")
          PY

      - name: Run IaC compliance validation
        id: run-validation
        continue-on-error: true
        shell: bash
        run: |
          set -euo pipefail

          args=("--format" "json")

          if [[ -n "${VALIDATION_PLAN_JSON:-}" ]]; then
            args+=("--plan-json" "$VALIDATION_PLAN_JSON")
          fi

          if [[ -n "${COMPLIANCE_FAIL_ON:-}" ]]; then
            args+=("--fail-on" "$COMPLIANCE_FAIL_ON")
          fi

          if [[ -n "${RULE_MANIFESTS:-}" ]]; then
            while IFS= read -r manifest; do
              [[ -z "$manifest" ]] && continue
              args+=("--rule-manifest" "$manifest")
            done <<< "${RULE_MANIFESTS}"
          fi

          RESULTS_PATH="$RUNNER_TEMP/compliance-results.json"
          echo "results_path=$RESULTS_PATH" >> "$GITHUB_OUTPUT"

          iac-compliance validate "${args[@]}" | tee "$RESULTS_PATH"
        # TODO(Track E): Replace fixture validation with real plan ingestion once implemented.

      - name: Summarize compliance findings
        if: always() && steps.run-validation.outputs.results_path != ''
        env:
          RESULTS_PATH: ${{ steps.run-validation.outputs.results_path }}
        run: |
          if [ ! -f "${RESULTS_PATH}" ]; then
            echo "Compliance results file not found: ${RESULTS_PATH}" >&2
            exit 0
          fi

          SUMMARY=$(python <<'PY'
import json
import os
from pathlib import Path

from compliance_service.cli.github_reporting import format_summary

results_path = Path(os.environ["RESULTS_PATH"])
report = json.loads(results_path.read_text(encoding="utf-8"))
print(format_summary(report))
PY
)

          printf '%s\n' "$SUMMARY" >> "$GITHUB_STEP_SUMMARY"

      - name: Annotate compliance findings
        if: always() && steps.run-validation.outputs.results_path != ''
        env:
          RESULTS_PATH: ${{ steps.run-validation.outputs.results_path }}
        run: |
          if [ ! -f "${RESULTS_PATH}" ]; then
            echo "Compliance results file not found: ${RESULTS_PATH}" >&2
            exit 0
          fi

          python <<'PY'
import json
import os
from pathlib import Path

from compliance_service.cli.github_reporting import iter_annotations

results_path = Path(os.environ["RESULTS_PATH"])
report = json.loads(results_path.read_text(encoding="utf-8"))
for command in iter_annotations(report):
    print(command)
PY

      - name: Upload compliance findings artifact
        if: always() && steps.run-validation.outputs.results_path != ''
        uses: actions/upload-artifact@v4
        with:
          name: compliance-findings
          path: ${{ steps.run-validation.outputs.results_path }}
          retention-days: 14

      - name: Fail when compliance validation reports violations
        if: steps.run-validation.outcome == 'failure'
        run: exit 1
